* Advent of Code 2020
I am not a lisp programmer, rather a lisp learner. My plan is to solve
each of the puzzles myself (as far as possible), then review other
submissions and refactor my code accordingly (with credit to sources
of better solutions).
Many thanks to everyone sharing their code on github - much
appreciated!

In particular:
- [[https://github.com/samuel-hunter/advent2020][samuel-hunter]]
  - For clarifying the loop syntax by example from day 1
- bpanthi on Lisp Discord
  - Further refactoring of code for day 1 (on 14/12!)
- [[https://github.com/larsen/advent2020][larsen]]
  - For the project setup and test driven approach with fiveam
  - Code using hash table on day4 - much clearer than my first effort!
  - Code for managing the trees on day7. I couldn't have completed
    this by myself (at least not in lisp!).
- [[https://www.youtube.com/channel/UCxkMDXQ5qzYOgXPRnOBrp1w][Mike
  Zemanski]] and his followers
  - seat-id Code refactor for day 5. Although his video on day 6 was
    in Clojure, he reviewed his day 5 code, and demonstrated a much
    more concise way to calculate the seat id. I then refactored my
    code accordingly.
- [[https://github.com/DavidBarringer/aoc2020/blob/master/day8/8b.lisp][David
  Barringer]]
  - Showing the way with day 8. I had made the solution to the first
    part myself, but using alists. It proved a real handful
    understanding what was changing and so on. David's approach with a
    structure was so much clearer. Also a very nice way to use the
    opcode to call the relevant function directly, compared to my
    original cond statement approach. I could have got part 2 in the
    end, but who knows how many hours it would have taken untangling
    the spaghetti code I had created. I am expecting to have to do
    more with the code reading over the next days, based on where I was
    in 2018, so I have plenty of opportunities to work with this code
    going forward. In the meantime, thanks David!
  - Day 13 - I had a function which worked, but was horrendously
    inefficient. David's solution to part b is very elegant.
  - Day 18 - Without David's solution, I would not have completed part
    1 or 2. David has implemented a very elegant solution (to my eyes
    anyway).
- zulu.inoue and phoe on the Lisp Discord 
  - Showing me how to resolve errors related to my lack of
    understanding for packages and symbols. Thanks guys!
- /r/mdbergmann on Reddit
  - Improving my project structure - separating the test code from the
    working code more clearly.
* License
Advent of code solutions - my solutions, with code from others,
    created in common lisp.
    
    Copyright (C) 2020  Paul Jewell and original coders.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see [[https://www.gnu.org/licenses/]]


